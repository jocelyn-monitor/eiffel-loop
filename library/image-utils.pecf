pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	xmlns = "http://www.eiffel.com/developers/xml/configuration-1-8-0"
	xmlns.xsi = "http://www.w3.org/2001/XMLSchema-instance" 
	xsi.schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-8-0 http://www.eiffel.com/developers/xml/configuration-1-8-0.xsd" 
	name = EL_image_utils
	uuid = "229b6cc8-09aa-11df-87a9-ffc4e5fcb1e7" 
	library_target = el_image_utils
	
	target:
		name = EL_image_utils
		
		description: 
			"""
				SVG to PNG conversion based on librsvg (http://librsvg.sourceforge.net/)
			"""

		root:
			all_classes = true

		option:
			trace = false; debug = false; warning = true; syntax = standard
			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		external_include:
			location = "$(EIFFEL_LOOP)/C_library/image-utils/source"

		# Windows includes
		external_include:
			location = "$(EIFFEL_LOOP)/contrib/C/Cairo-1.12.16/include/cairo"
			condition:
				platform:
					value = windows

		external_include:
			location = "$(EIFFEL_LOOP)/contrib/C/Cairo-1.12.16/include/librsvg-2.0/librsvg"
			condition:
				platform:
					value = windows

		external_include: 
			location = "$(EIFFEL_LOOP)/contrib/C/Cairo-1.12.16/include/glib-2.0"
			condition:
				platform:
					value = windows

		external_include: 
			location = "$(EIFFEL_LOOP)/contrib/C/Cairo-1.12.16/lib/glib-2.0/include"
			condition:
				platform:
					value = windows

		# Unix includes
		external_include:
			location = "/usr/include/cairo"
			condition:
				platform:
					value = unix

		external_include:
			location = "/usr/include/librsvg-2.0/librsvg"
			condition:
				platform:
					value = unix

		external_include:
			location = "/usr/include/glib-2.0"
			condition:
				platform:
					value = unix

		# Needs to be a way to select the 32 bit version but how?
		external_include: 
			location = "/usr/lib/x86_64-linux-gnu/glib-2.0/include"
			condition:
				platform:
					value = unix

		# For Windows
		# The following objects are excluded from being linked because they are intended for dynamic linking at runtime. 
		# They are included to trigger SCons build scripts.

		variable:
			name = link_object; value = false

		external_object:
			location = "$(EIFFEL_LOOP)/C_library/image-utils/spec/$(ISE_PLATFORM)/elimageutils.dll"
			description:
				"""
					elimageutils.dll requires:
					$EIFFEL_LOOP/C_library/image-utils/spec/$ISE_PLATFORM/elimageutils.dll
				"""
			condition:
				platform:
					value = windows
				custom:
					name = link_object; value = true

		external_object:
			location = "$(EIFFEL_LOOP)/contrib/C/Cairo-1.12.16/spec/$(ISE_PLATFORM)/libcairo-2.dll"
			description:
				"""
					libcairo-2.dll requires:
					$EIFFEL_LOOP/contrib/C/Cairo-1.12.16/spec/$ISE_PLATFORM/*.dll
				"""
			condition:
				platform:
					value = windows
				custom:
					name = link_object; value = true

		# For Unix
		external_object:
			location = "$(EIFFEL_LOOP)/C_library/image-utils/spec/$(ISE_PLATFORM)/libelimageutils.so"
			description:
				"""
					libelimageutils.so requires:
					$EIFFEL_LOOP/C_library/image-utils/spec/$ISE_PLATFORM/libelimageutils.so
				"""
			condition:
				platform:
					value = unix
				custom:
					name = link_object; value = true

		library: 
			name = base; location = "$ISE_LIBRARY/library/base/base.ecf"

		# Eiffel-Loop
		library:
			name = EL_base; location = "base.ecf"; readonly = false

		library:
			name = EL_c_api; location = "C-language-interface.ecf"; readonly = false

		# Source code
		cluster:
			name = image_utils; location = "graphic/image/utils"; recursive = true
			file_rule:
				exclude:
					"/windows$"
				condition:
					platform:
						value = unix

			file_rule:
				exclude:
					"/unix$"
				condition:
					platform:
						value = windows


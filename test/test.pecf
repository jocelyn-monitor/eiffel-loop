pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

# Pyxis as an acronym stands for: Pythonic XML ideal source.
# It is also a Latin transliteration of a Greek word for a type of pottery used by women to hold 
# cosmetics, trinkets or jewellery. 

# The following is project configuration data for an Eiffel programming language project
# compiled with the EiffelStudio IDE

# This project contains a parser for the Pyxis format and a Pyxis to XML convertion utility

system:
	xmlns = "http://www.eiffel.com/developers/xml/configuration-1-8-0"
	xmlns.xsi = "http://www.w3.org/2001/XMLSchema-instance" 
	xsi.schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-8-0 http://www.eiffel.com/developers/xml/configuration-1-8-0.xsd" 
	name = EL_test
	uuid="A325754F-7BEB-44B6-937C-CC7EBDDA764F"
	
	# classic means C code as an intermediate language
	target: 
		name = classic

		root:
			class = APPLICATION_ROOT; feature = make

		option:
			syntax = standard
			assertions:
				precondition = true; postcondition = true; check = true

		setting:
			name = address_expression; value = false

		setting:
			name = array_optimization; value = false

		setting:
			name = check_vape; value = true

		setting:
			name = console_application; value = true

		setting:
			name = dead_code_removal; value = true

		setting:
			name = dynamic_runtime; value = false

		setting:
			name = exception_trace; value = false

		setting:
			name = inlining; value = false

		setting:
			name = line_generation; value = false

		setting:
			name = inlining_size; value = 2

		setting:
			name = concurrency; value = thread

		precompile:
			name = precompile; location = "$EIFFEL_LOOP/precomp/$ISE_PLATFORM/console-application.ecf"

		library:
			name = base; location = "$ISE_LIBRARY/library/base/base.ecf"
			option:
				assertions:
					precondition = true; postcondition = true; check = true

		library:
			name = base_ext; location = "$ISE_LIBRARY/library/base_extension/base_extension.ecf"

		library:
			name = thread; location = "$ISE_LIBRARY/library/thread/thread.ecf"

		library:
			name = time; location = "$ISE_LIBRARY/library/time/time.ecf"

		library:
			name = testing; location = "$ISE_LIBRARY/library/testing/testing.ecf"

		# Gobo
		library: 
			name = gobo_kernel; location = "$ISE_LIBRARY/library/gobo/gobo_kernel.ecf"

		library:
			name = gobo_base; location = "$EIFFEL_LOOP/library/gobo-base.ecf"


		# Eiffel Loop libraries
		library:
			name = EL_app_manage; location = "$EIFFEL_LOOP/library/app-manage.ecf"
			readonly = false

		library:
			name = EL_base; location = "$EIFFEL_LOOP/library/base.ecf"; readonly = false
			option:
				assertions:
					precondition = true; postcondition = true; check = true
			#; use_application_options = true

		library:
			name = EL_c_api; location = "$EIFFEL_LOOP/library/C-language-interface.ecf"; readonly = false

		library:
			name = EL_image_utils; readonly = false
			location="$EIFFEL_LOOP/library/image-utils.ecf"

		library:
			name = EL_id3_tags; location = "$EIFFEL_LOOP/library/ID3-tags.ecf"
			readonly = false

		library:
			name = EL_compression; location = "$EIFFEL_LOOP/library/compression.ecf"
			readonly = false

		library:
			name = EL_eyeD3; location = "$EIFFEL_LOOP/library/eyeD3.ecf"
			readonly = false

		library:
			name = EL_encryption; location = "$EIFFEL_LOOP/library/encryption.ecf"
			readonly = false

		library:
			name = EL_database; readonly = false
			location = "$EIFFEL_LOOP/library/database.ecf"

		library:
			name = EL_http; readonly = false
			location = "$EIFFEL_LOOP/library/http.ecf"

		library:
			name = EL_i18n; readonly = false
			location = "$EIFFEL_LOOP/library/i18n.ecf"

		library:
			name = EL_network; readonly = false
			location="$EIFFEL_LOOP/library/network.ecf"

		library:
			name = EL_vtd_xml; location = "$EIFFEL_LOOP/library/vtd-xml.ecf"
			readonly = false

		library:
			name = EL_xml_conversion; location = "$EIFFEL_LOOP/library/xml-conversion.ecf"
			readonly = false

		library:
			name = EL_xdoc_scanning; location = "$EIFFEL_LOOP/library/xdoc-scanning.ecf"
			readonly = false

		cluster:
			name = project; location = "source"; recursive = true

			file_rule:
				exclude:
					"/spec/unix$"
				condition:
					platform:
						value = windows

			file_rule:
				exclude:
					"/spec/windows$"
				condition:
					platform:
						value = unix
		# Build 2014-06-07 09:39:58.224360
		# Build 2014-06-07 14:00:27.972927
		# Build 2014-06-07 14:14:31.660026
		# Build 2014-06-07 14:18:08.379267
		# Build 2014-06-07 14:53:41.610995

pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

# Pyxis as an acronym stands for: Pythonic XML ideal source.
# It is also a Latin transliteration of a Greek word for a type of pottery used by women to hold 
# cosmetics, trinkets or jewellery. 

# The following is project configuration data for an Eiffel programming language project
# compiled with the EiffelStudio IDE

# This project contains a parser for the Pyxis format and a Pyxis to XML convertion utility

system:
	xmlns = "http://www.eiffel.com/developers/xml/configuration-1-8-0"
	xmlns.xsi = "http://www.w3.org/2001/XMLSchema-instance" 
	xsi.schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-8-0 http://www.eiffel.com/developers/xml/configuration-1-8-0.xsd" 
	name = el_animation
	uuid="229b7a2e-09aa-11df-87cb-6f5c8d784696"
	
	# classic means C code as an intermediate language
	target: 
		name = classic

		root:
			class = APPLICATION_ROOT; feature = make

		option: 
			trace = false; debug = false; warning = true; syntax = standard

			assertions:
				precondition = true; postcondition = true; check = false; invariant = false

			debug:
				name = __unnamed_debug__; enabled = false
			debug:
				name = dlg_dispatcher; enabled = false
			debug:
				name = refactor_fixme; enabled = false
			debug:
				name = vision2_windows; enabled = false
			debug:
				name = vision2_windows_gdi; enabled = false
			debug:
				name = wel; enabled = false
			debug:
				name = wel_gdi_count; enabled = false
			debug:
				name = wel_gdi_references; enabled = false
			debug:
				name = win_dispatcher; enabled = false
			warning:
				name = export_class_missing; enabled = false
			warning:
				name = old_verbatim_strings; enabled = false
			warning:
				name = syntax; enabled = false
			warning:
				name = vjrv; enabled = false

		setting:
			name = address_expression; value = false

		setting:
			name = array_optimization; value = false

		setting:
			name = check_vape; value = true

		setting:
			name = console_application; value = true

		setting:
			name = dead_code_removal; value = true

		setting:
			name = dynamic_runtime; value = false

		setting:
			name = exception_trace; value = false

		setting:
			name = inlining; value = false

		setting:
			name = line_generation; value = false

		setting:
			name = concurrency; value = thread

		precompile:
			name = precompile; location = "$EIFFEL_LOOP/precomp/$ISE_PLATFORM/GUI-application.ecf"

		library:
			name = base; location = "$ISE_LIBRARY/library/base/base.ecf"

		library:
			name = thread; location = "$ISE_LIBRARY/library/thread/thread.ecf"

		library:
			name = time; location = "$ISE_LIBRARY/library/time/time.ecf"
		
		# Eiffel Loop overrides
		library:
			name = vision2; location = "$EIFFEL_LOOP/library/ES-vision2.ecf"
			readonly = false

			option:
				assertions:
					precondition = true; postcondition = true; check = true

		library:
			name = docking; readonly = false
			location = "$EIFFEL_LOOP/library/ES-docking.ecf"
			
			option:
				assertions:
					precondition = true; postcondition = true; check = true

		# Eiffel Loop libraries
		library:
			name = el_base; location = "$EIFFEL_LOOP/library/base.ecf"
			readonly = false
			#use_application_options = true

		library:
			name = el_app_manage; location = "$EIFFEL_LOOP/library/app-manage.ecf"
			readonly = false

		library:
			name = el_eiffel2java; location = "$EIFFEL_LOOP/library/eiffel2java.ecf"
			readonly = false
			option:
				assertions:
					precondition = true; postcondition = true; check = true

		library:
			name = el_vision2; location = "$EIFFEL_LOOP/library/vision2-x.ecf"

		library:
			name = el_wel; location = "$EIFFEL_LOOP/library/wel-x.ecf"
			readonly = false
			condition:
				platform:
					value = windows

		cluster:
			name = project; location = "source"; recursive = true

